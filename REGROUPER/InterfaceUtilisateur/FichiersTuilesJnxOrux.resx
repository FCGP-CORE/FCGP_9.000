<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ToolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>17, 17</value>
  </data>
  <data name="Label3.ToolTip" xml:space="preserve">
    <value>Indice d'affichage par défault de l'échelle (niveaux de détails)
concernant les fichiers JNX.
Valeur par défaut de GF --&gt; 004 : 5, 007 : 6, 015 : 7, 030 : 8, 060 : 9, 120 : 10, 250 : 11, 500 : 12
Valeur par défaut de SM --&gt; 010 : 7, 025 : 8, 100 : 10, 200 : 11
Valeur par défaut de DT --&gt; 004 : 6, 007 : 7, 015 : 8, 030 : 9, 060 : 10, 120 : 11</value>
  </data>
  <data name="Label4.ToolTip" xml:space="preserve">
    <value>Valeur du zoom JNX corrigé (pas de 0.5)
Plus élevé : retarde la disparition du niveau de détail quand on diminue l'échelle d'affichage (Zoom-)
Moins élevé : avance la disparition du niveau de détail quand on diminue l'échelle d'affichage (Zoom+)</value>
  </data>
  <data name="Label31.ToolTip" xml:space="preserve">
    <value>Indice d'affichage par défault de l'échelle (niveaux de détails)
concernant les fichiers ORUX.
Valeur par défaut de GF --&gt; 004 : 18, 007 : 17, 015 : 16, 030 : 15, 060 : 14, 120 : 13, 250 : 12, 500 : 11
Valeur par défaut de SM --&gt; 010 : 16, 025 : 15, 100 : 13, 200 : 12
Valeur par défaut de DT --&gt; 004 : 17, 007 : 16, 015 : 15, 030 : 14, 060 : 13, 120 : 12</value>
  </data>
  <data name="CorLargeur.ToolTip" xml:space="preserve">
    <value>Modifiez la largeur pour ajuster les dimensions en coordonnées
de géoréférencement et ou modifier le poids du fichier et le nombre de tuiles.
Double Click : Arrondi en pixels tuile fichier.
Shift + Double Click : Ajoute les pixelx d'une tuile fichier.
Ctrl + Double Click : Enlève les pixelx d'une tuile fichier.
</value>
  </data>
  <data name="CorHauteur.ToolTip" xml:space="preserve">
    <value>Modifiez la largeur pour ajuster les dimensions en coordonnées
de géoréférencement et ou modifier le poids du fichier et le nombre de tuiles.
Double Click : Arrondi en pixels tuile fichier.
Shift + Double Click : Ajoute les pixelx d'une tuile fichier.
Ctrl + Double Click : Enlève les pixelx d'une tuile fichier.
</value>
  </data>
  <data name="CorPT0X.ToolTip" xml:space="preserve">
    <value>Corriger en plus ou en moins la position X du point PT0 pour
ajuster les coordonnées de géoréférencement de ce point.
Double Click : Arrondi en pixels tuile serveur.
Shift + Double Click : Ajoute les pixelx d'une tuile serveur.
Ctrl + Double Click : Enlève les pixelx d'une tuile serveur.</value>
  </data>
  <data name="CorPT0Y.ToolTip" xml:space="preserve">
    <value>Corriger en plus ou en moins la position Y du point PT0 pour
ajuster les coordonnées de géoréférencement de ce point.
Double Click : Arrondi en pixels tuile serveur.
Shift + Double Click : Ajoute les pixelx d'une tuile serveur.
Ctrl + Double Click : Enlève les pixelx d'une tuile serveur.</value>
  </data>
  <data name="N256.ToolTip" xml:space="preserve">
    <value>Les tuiles peuvent être de 256*256 pixels ou 512*512 pixels.
Les petites tuiles sont plus rapides pour l'affichage sur le GPS
avec l'inconvénient de diviser la taille du fichier KMZ par 4</value>
  </data>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="$this.TrayHeight" type="System.Int32, mscorlib">
    <value>34</value>
  </data>
</root>